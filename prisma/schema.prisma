generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cuentascompartidas {
  id            Int          @id @default(autoincrement())
  correo        String       @db.VarChar(100)
  contrasena    String       @map("contrasena") @db.VarChar(100)
  proveedor     String?      @db.VarChar(50)
  plataforma_id Int?
  plataformas   plataformas? @relation(fields: [plataforma_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_plataforma")
  pantallas     pantallas[]

  @@index([plataforma_id], map: "fk_plataforma")
}

model cuentascompletas {
  id                BigInt      @id @default(autoincrement()) @db.UnsignedBigInt
  contacto          String      @db.VarChar(50)
  plataforma_id     Int
  correo        String       @db.VarChar(100)
  contrasena    String       @map("contrasena") @db.VarChar(100)
  proveedor         String?     @db.VarChar(64)
  fecha_compra      DateTime?   @db.Date
  fecha_vencimiento DateTime?   @db.Date
  meses_pagados     Int?
  total_pagado      Decimal?    @db.Decimal(18, 2)
  total_ganado      Decimal?    @db.Decimal(18, 2)
  total_pagado_proveedor      Decimal?    @db.Decimal(18, 2)
  estado            String?     @db.VarChar(20)
  comentario        String?     @db.Text
  plataformas       plataformas @relation(fields: [plataforma_id], references: [id], map: "fk_cc_plataformas_id")
  usuarios          usuarios    @relation(fields: [contacto], references: [contacto], onDelete: Cascade, map: "fk_cc_usuarios_contacto")

  @@index([contacto], map: "idx_contacto")
  @@index([plataforma_id], map: "idx_plataforma_id")
  @@index([proveedor], map: "idx_proveedor")
}

model pantallas {
  id                 Int                @id @default(autoincrement())
  cuenta_id          Int
  contacto           String             @db.VarChar(50)
  nro_pantalla       String             @db.VarChar(50)
  fecha_compra       DateTime           @db.Date
  fecha_vencimiento  DateTime           @db.Date
  meses_pagados      Int?               @default(0)
  total_pagado       Decimal?           @default(0.00) @db.Decimal(10, 2)
  total_ganado      Decimal?    @db.Decimal(18, 2)
  total_pagado_proveedor      Decimal?    @db.Decimal(18, 2)
  estado             String             @db.VarChar(20)
  comentario         String?            @db.Text
  usuarios           usuarios           @relation(fields: [contacto], references: [contacto], onDelete: Cascade, map: "fk_pantalla_contacto")
  cuentascompartidas cuentascompartidas @relation(fields: [cuenta_id], references: [id], onDelete: Cascade, map: "fk_pantalla_cuenta")

  @@index([contacto], map: "fk_pantalla_contacto")
  @@index([cuenta_id], map: "fk_pantalla_cuenta")
}

model plataformas {
  id                 Int                  @id @default(autoincrement())
  nombre             String               @unique(map: "nombre") @db.VarChar(100)
  cuentascompartidas cuentascompartidas[]
  cuentascompletas   cuentascompletas[]
  inventario         inventario[] 
}

model usuarios {
  contacto         String             @id @unique(map: "contacto_UNIQUE") @db.VarChar(50)
  nombre           String?            @db.VarChar(100)
  cuentascompletas cuentascompletas[]
  pantallas        pantallas[]
}

model MetricasMensuales {
  id               Int      @id @default(autoincrement())
  year             Int
  month            Int       // 1..12
  periodLabel      String    // "YYYY-MM"
  // Totales principales
  totalGeneral     Decimal   @db.Decimal(16,2)
  totalPantallas   Decimal   @db.Decimal(16,2)
  totalCuentas     Decimal   @db.Decimal(16,2)
  ventasCantidad   Int       // cantidad de ventas (unidades)
  clientesActivos  Int
  // Agregados detallados del mes
  ranking          Json      // [{ name, count, total, pid? }]
  ventasDias       Json      // [{ day:"01", total, pantallas, completas }]
  payload          Json?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([year, month])
  @@index([periodLabel])
}

model wa_notificaciones {
  id        BigInt   @id @default(autoincrement())
  phone     String   @db.VarChar(20)
  fecha     DateTime @db.Date
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([phone, fecha], name: "uq_phone_fecha")
  @@map("wa_notificaciones")
}

model wa_logs {
  id        BigInt   @id @default(autoincrement())
  phone     String   @db.VarChar(20)
  status    LogStatus
  message   String?  @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  @@map("wa_logs")
}

enum LogStatus {
  OK
  FALLBACK
  ERROR
}

model inventario {
  id            Int          @id @default(autoincrement())
  plataforma_id Int
  correo        String
  clave         String?

  plataformas   plataformas  @relation(fields: [plataforma_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([plataforma_id, correo]) // evita correos duplicados por plataforma
  @@index([plataforma_id])
}